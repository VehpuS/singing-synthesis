import React from "react";

// @ts-expect-error - This is an autogenerated file that will be overwritten or replaced by the build process
import createOddVoicesModule from "./js/oddvoices_wasm.mjs";
import { OddVoiceJSON } from "../oddVoiceJSON/oddVoiceHelpers";
import { Voice, voiceUrlPrefix } from "./oddvoicesUtils";
import { useQuery } from "@tanstack/react-query";

interface VoiceObject {
    initFromFile: (filename: string) => void;
}

interface VoiceFactory {
    new (): VoiceObject;
}

export const useOddVoicesApp = () => {
    const [didWriteVoicesFolder, setDidWriteVoicesFolder] = React.useState(false);
    const [activeVoice, setActiveVoice] = React.useState<Voice>(Voice.air);

    const [oddVoiceApp, setOddVoiceApp] = React.useState<{
        sing: (voice: VoiceObject, input: string, output: string, lyricsOverride: string) => string;
        FS: {
            readFile: (filename: string) => Uint8Array;
            writeFile: (filename: string, data: Uint8Array) => void;
            mkdir: (dirname: string) => void;
        };
        Voice: VoiceFactory;
    } | null>(null);

    React.useEffect(() => {
        const initialize = async () => setOddVoiceApp(await createOddVoicesModule());
        initialize();
    }, []);

    React.useEffect(() => {
        if (!oddVoiceApp) {
            return;
        }
        oddVoiceApp?.FS.mkdir("/voices/");
        setDidWriteVoicesFolder(true);
    }, [oddVoiceApp]);

    const {
        data: voiceData,
        isLoading: isLoadingVoice,
        error: voiceError,
    } = useQuery({
        queryKey: ["oddVoices", activeVoice],
        queryFn: async () => {
            if (!oddVoiceApp || !activeVoice) {
                return;
            }
            const response = await fetch(`${voiceUrlPrefix}${activeVoice}.voice`);
            const buffer = await response.arrayBuffer();

            const fileName = `/voices/${activeVoice}.voice`;
            oddVoiceApp.FS.writeFile(fileName, new Uint8Array(buffer));

            const voice = new oddVoiceApp.Voice();
            voice.initFromFile(fileName);

            return voice;
        },
        enabled: Boolean(didWriteVoicesFolder && activeVoice && oddVoiceApp),
        retry: false,
    });

    const generateVoiceFromOddVoiceJson = (oddVoiceJson: OddVoiceJSON): Uint8Array | undefined => {
        if (!oddVoiceApp) {
            console.error("OddVoice app not initialized");
            return;
        }
        if (!voiceData) {
            console.error("Voice data not loaded");
            return;
        }
        const error: string = oddVoiceApp.sing(voiceData, JSON.stringify(oddVoiceJson), "out.wav", "");
        if (error !== "") {
            console.error(error);
            return;
        }

        const buffer: Uint8Array = oddVoiceApp.FS.readFile("out.wav");
        if (!buffer || buffer.length === 0) {
            console.error("No buffer");
            return;
        }
        return buffer;
    };

    if (voiceError) {
        console.error(voiceError);
    }

    return {
        isLoadingApp: !oddVoiceApp,
        isLoadingVoice,
        generateVoiceFromOddVoiceJson,
        activeVoice,
        setActiveVoice,
        voiceLoadingFailed: !isLoadingVoice && !voiceData,
    };
};
